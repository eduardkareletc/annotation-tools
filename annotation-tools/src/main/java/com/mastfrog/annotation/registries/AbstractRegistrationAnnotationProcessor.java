/*
 * The MIT License
 *
 * Copyright 2018 Tim Boudreau.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.mastfrog.annotation.registries;

import com.mastfrog.annotation.AnnotationUtils;
import java.lang.annotation.AnnotationTypeMismatchException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.element.AnnotationMirror;
import javax.lang.model.element.AnnotationValue;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import javax.tools.Diagnostic;

/**
 * Base class for annotation processors that generate a registration file
 * somewhere under META-INF. Has support for writing lines to the file, deriving
 * class names from annotation fields of type Class, which requires some
 * complexity with AnnotationMirror. Simply override getOrder() and handleOne()
 * and call addLine().
 *
 * @author Tim Boudreau
 */
public abstract class AbstractRegistrationAnnotationProcessor<E extends IndexEntry> extends IndexGeneratingProcessor<E> {

    protected final Set<String> legalOn;
    Set<Element> elements = new HashSet<>();
    private final List<String> deferred = new LinkedList<>();

    public AbstractRegistrationAnnotationProcessor(AnnotationIndexFactory<E> indexer,
            String... annotationLegalOnFqns) {
        super(true, indexer);
        this.legalOn = new HashSet<>(Arrays.asList(annotationLegalOnFqns));
    }

    public AbstractRegistrationAnnotationProcessor(boolean processOnFinalRound, AnnotationIndexFactory<E> indexer,
            String... annotationLegalOnFqns) {
        super(processOnFinalRound, indexer);
        this.legalOn = new HashSet<>(Arrays.asList(annotationLegalOnFqns));
    }


    protected int getOrder(AnnotationMirror anno) {
        return 0;
    }

    protected boolean isLegalForAnnotation(Element e, AnnotationMirror mirror) {
        if (legalOn.isEmpty()) {
            return true;
        }
        for (String type : legalOn) {
            if (utils().isSubtypeOf(e, type).isSubtype()) {
                return true;
            }
        }
        return false;
    }

    protected void fail(String msg, Element el, AnnotationMirror mirror, AnnotationValue value) {
        processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, msg, el, mirror, value);
    }

    protected void fail(String msg, Element el, AnnotationMirror mirror) {
        processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, msg, el, mirror);
    }

    protected void fail(String msg, Element el) {
        processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, msg, el);
    }

    protected void fail(String msg) {
        processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, msg);
    }

    protected boolean isAcceptable(AnnotationMirror anno) {
//        String annoTypeName = ((TypeElement) anno.getAnnotationType()).getQualifiedName().toString();
//        return getSupportedAnnotationTypes().contains(annoTypeName);
        return true;
    }

    @Override
    public boolean handleProcess(Set<? extends TypeElement> annotations,
            RoundEnvironment roundEnv, AnnotationUtils utils) {
        Set<Element> all = utils.findAnnotatedElements(roundEnv);
        List<String> failed = new LinkedList<>();

        // Add in any types that could not be generated on a previous round because
        // they relied on a generated time (i.e. @InjectRequestBodyAs can't be copied
        // correctly into a generated page subclass if the type of its value will be
        // generated by Numble in a later round of processing)
        for (String type : deferred) {
            TypeElement retry = processingEnv.getElementUtils().getTypeElement(type);
            all.add(retry);
        }
        deferred.clear();
        try {
            for (Element e : all) {
                try {

                    Set<AnnotationMirror> annos = utils.findAnnotationMirrors(e);
                    for (AnnotationMirror am : annos) {
                        if (isAcceptable(am)) {
                            int order = getOrder(am);
                            if (!isLegalForAnnotation(e, am)) {
                                String[] strings = legalOn.toArray(new String[legalOn.size()]);
                                fail("Not a subclass of " + AnnotationUtils.join('/', strings) + ": " + e.asType(), e, am);
                                continue;
                            }
                            elements.add(e);
                            try {
                                handleOne(e, am, order, utils);
                            } catch (AnnotationTypeMismatchException ex) {
                                fail(ex.getMessage(), e, am);
                                return true;
                            }
                        } else {
                            fail("isAcceptable() fails for " + am, e, am);
                        }
                    }
                } catch (RuntimeException ex) {
                    if (ex.getMessage() != null && ex.getMessage().contains("Erroneous tree type")) {
                        fail(ex.getMessage(), e);
                        return true;
                    } else {
                        Logger.getLogger(AbstractRegistrationAnnotationProcessor.class.getName()).log(Level.SEVERE, null, ex);
                        fail(ex.getClass().getName() + ": " + ex.getMessage());
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(AbstractRegistrationAnnotationProcessor.class.getName()).log(Level.SEVERE, null, ex);
            fail(ex.getClass().getName() + ": " + ex.getMessage());
            return false;
        }
        deferred.addAll(failed);
        return failed.isEmpty();
    }

    protected abstract void handleOne(Element e, AnnotationMirror anno, int order, AnnotationUtils utils);
}
